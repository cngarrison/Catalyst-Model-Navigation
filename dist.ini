name    = Catalyst-Model-Navigation
author  = Charlie Garrison <garrison@zeta.org.au>
license = Perl_5
copyright_holder = Charlie Garrison
copyright_year   = 2015

[AutoPrereqs]
skip = ^TestsFor

; [@Basic]
[@Filter]
-bundle = @Basic
-remove = GatherDir
-remove = UploadToCPAN

[MetaJSON]
[GatherDir]
exclude_match = ^.*\.bbprojectd
;[ConfirmRelease] ;; Already part of Basic Filter

[GithubMeta]
issues = 1
user   = cngarrison
;[@Git]
[Git::Check]
;[Git::NextVersion]
[Git::NextVersion::Sanitized]
first_version = 0.000001
; version_regexp  = ^(?:v|release-)(.+)$ 
version_regexp  = ^(?:v|release-)(.+?)(?:-TRIAL)$
[Git::Commit]
[Git::CommitBuild]  ; commit the results of the build to a branch that is completely separate from your regular code branches (i.e. with a different root commit).
[Git::Tag]
tag_format = release-%v%t
tag_message = %N v%v%t%nReleased on %d
signed = 1

[PodWeaver]
[CheckChangeLog]
[OurPkgVersion]
[NextRelease]
[Signature]

;[CheckExtraTests]
;[PodCoverageTests]
[PodSyntaxTests]
;[Test::NoTabs]
[Test::CPAN::Changes]
[Test::DistManifest]
[Test::Pod::LinkCheck]
[Test::ReportPrereqs]
;; the code in the SYNOPSIS is never going to compile as it is anyway
; [Test::Synopsis]
[Test::UnusedVars]

[Run::Release]
censor_commands = 1
; run = script/myapp_deploy.pl %s
; run = echo "released %s"
run_if_trial = scp -q %a gcs@mtsh.make-tracks.com:etc/releases/
; run_if_trial = scp -q %a christianvenues@mtsh.make-tracks.com:etc/releases/
run_no_trial = scp -q %a funeralarrangement@mtsh.make-tracks.com:etc/releases/
run_no_trial = scp -q %a christianvenues@mtsh.make-tracks.com:etc/releases/
; run = scp -q %a christianvenues@mtsh.make-tracks.com:etc/releases/
[Run::AfterRelease]
run = mv %a ../../Catalyst-Model-Navigation-support/releases/ && rm -rf ./%d

; [Prereqs / TestRequires]
; DBIx::Class::Schema::RestrictWithObject = 0

[Prereqs]
perl = 5.010
Catalyst::Model::Factory = 0
Scalar::Util = 0
URL::Encode = 0
Data::Printer = 0



[ReadmeAnyFromPod / MarkdownInRoot ]
filename = README.md

; [Run::BeforeBuild]
; run = test -f Makefile.PL && rm Makefile.PL
; 
; [Run::AfterBuild]
; run = cp %d/Makefile.PL ./
; run = git status --porcelain | grep 'M Makefile.PL' && git commit -m 'auto-committed by dist.ini' Makefile.PL || echo Makefile.PL up to date
